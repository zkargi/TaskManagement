/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { ValidationStatus } from 'devextreme/common';
import { UserDefinedElement } from 'devextreme/core/element';
import { BeforeSendEvent, ContentReadyEvent, DisposingEvent, DropZoneEnterEvent, DropZoneLeaveEvent, FilesUploadedEvent, FileUploadMode, InitializedEvent, OptionChangedEvent, ProgressEvent, UploadAbortedEvent, UploadedEvent, UploadErrorEvent, UploadHttpMethod, UploadStartedEvent, ValueChangedEvent } from 'devextreme/ui/file_uploader';
import DxFileUploader from 'devextreme/ui/file_uploader';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import type * as DxFileUploaderTypes from "devextreme/ui/file_uploader_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
/**
 * The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.

 */
export declare class DxFileUploaderComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxFileUploader;
    /**
     * A function that cancels the file upload.
    
     */
    get abortUpload(): Function;
    set abortUpload(value: Function);
    /**
     * Specifies a file type or several types accepted by the UI component.
    
     */
    get accept(): string;
    set accept(value: string);
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Specifies if an end user can remove a file from the selection and interrupt uploading.
    
     */
    get allowCanceling(): boolean;
    set allowCanceling(value: boolean);
    /**
     * Restricts file extensions that can be uploaded to the server.
    
     */
    get allowedFileExtensions(): Array<string>;
    set allowedFileExtensions(value: Array<string>);
    /**
     * Specifies the chunk size in bytes. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;. Requires a server that can process file chunks.
    
     */
    get chunkSize(): number;
    set chunkSize(value: number);
    /**
     * Specifies the HTML element which invokes the file upload dialog.
    
     */
    get dialogTrigger(): UserDefinedElement | string | undefined;
    set dialogTrigger(value: UserDefinedElement | string | undefined);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the HTML element in which users can drag and drop files for upload.
    
     */
    get dropZone(): UserDefinedElement | string | undefined;
    set dropZone(value: UserDefinedElement | string | undefined);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the FileUploader component changes the state of all its buttons when users hover over them.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies the attributes to be passed on to the underlying `` element of the `file` type.
    
     */
    get inputAttr(): any;
    set inputAttr(value: any);
    /**
     * The text displayed when the extension of the file being uploaded is not an allowed file extension.
    
     */
    get invalidFileExtensionMessage(): string;
    set invalidFileExtensionMessage(value: string);
    /**
     * The text displayed when the size of the file being uploaded is greater than the maxFileSize.
    
     */
    get invalidMaxFileSizeMessage(): string;
    set invalidMaxFileSizeMessage(value: string);
    /**
     * The text displayed when the size of the file being uploaded is less than the minFileSize.
    
     */
    get invalidMinFileSizeMessage(): string;
    set invalidMinFileSizeMessage(value: string);
    /**
     * Specifies whether the component&apos;s current value differs from the initial value.
    
     */
    get isDirty(): boolean;
    set isDirty(value: boolean);
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * Specifies the text displayed on the area to which an end user can drop a file.
    
     */
    get labelText(): string;
    set labelText(value: string);
    /**
     * Specifies the maximum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
    
     */
    get maxFileSize(): number;
    set maxFileSize(value: number);
    /**
     * Specifies the minimum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
    
     */
    get minFileSize(): number;
    set minFileSize(value: number);
    /**
     * Specifies whether the UI component enables an end user to select a single file or multiple files.
    
     */
    get multiple(): boolean;
    set multiple(value: boolean);
    /**
     * Specifies the value passed to the name attribute of the underlying input element. Required to access uploaded files on the server.
    
     */
    get name(): string;
    set name(value: string);
    /**
     * Gets the current progress in percentages.
    
     */
    get progress(): number;
    set progress(value: number);
    /**
     * Specifies whether the editor is read-only.
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * The message displayed by the UI component when it is ready to upload the specified files.
    
     */
    get readyToUploadMessage(): string;
    set readyToUploadMessage(value: string);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * The text displayed on the button that opens the file browser.
    
     */
    get selectButtonText(): string;
    set selectButtonText(value: string);
    /**
     * Specifies whether or not the UI component displays the list of selected files.
    
     */
    get showFileList(): boolean;
    set showFileList(value: boolean);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * The message displayed by the UI component when the file upload is cancelled.
    
     */
    get uploadAbortedMessage(): string;
    set uploadAbortedMessage(value: string);
    /**
     * The text displayed on the button that starts uploading.
    
     */
    get uploadButtonText(): string;
    set uploadButtonText(value: string);
    /**
     * A function that uploads a file in chunks.
    
     */
    get uploadChunk(): Function;
    set uploadChunk(value: Function);
    /**
     * Specifies custom data for the upload request.
    
     */
    get uploadCustomData(): any;
    set uploadCustomData(value: any);
    /**
     * The message displayed by the UI component when uploading is finished.
    
     */
    get uploadedMessage(): string;
    set uploadedMessage(value: string);
    /**
     * The message displayed by the UI component on uploading failure.
    
     */
    get uploadFailedMessage(): string;
    set uploadFailedMessage(value: string);
    /**
     * A function that uploads a file.
    
     */
    get uploadFile(): Function;
    set uploadFile(value: Function);
    /**
     * Specifies headers for the upload request.
    
     */
    get uploadHeaders(): any;
    set uploadHeaders(value: any);
    /**
     * Specifies the method for the upload request.
    
     */
    get uploadMethod(): UploadHttpMethod;
    set uploadMethod(value: UploadHttpMethod);
    /**
     * Specifies how the UI component uploads files.
    
     */
    get uploadMode(): FileUploadMode;
    set uploadMode(value: FileUploadMode);
    /**
     * Specifies a target Url for the upload request.
    
     */
    get uploadUrl(): string;
    set uploadUrl(value: string);
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * An array of the validation rules that failed.
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * Indicates or specifies the current validation status.
    
     */
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    /**
     * Specifies a File instance representing the selected file. Read-only when uploadMode is &apos;useForm&apos;.
    
     */
    get value(): Array<any>;
    set value(value: Array<any>);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that allows you to customize the request before it is sent to the server.
    
    
     */
    onBeforeSend: EventEmitter<BeforeSendEvent>;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is executed when the mouse enters a drop zone while dragging a file.
    
    
     */
    onDropZoneEnter: EventEmitter<DropZoneEnterEvent>;
    /**
    
     * A function that is executed when the mouse leaves a drop zone as it drags a file.
    
    
     */
    onDropZoneLeave: EventEmitter<DropZoneLeaveEvent>;
    /**
    
     * A function that is executed when the file upload process is complete.
    
    
     */
    onFilesUploaded: EventEmitter<FilesUploadedEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed when a file segment is uploaded.
    
    
     */
    onProgress: EventEmitter<ProgressEvent>;
    /**
    
     * A function that is executed when the file upload is aborted.
    
    
     */
    onUploadAborted: EventEmitter<UploadAbortedEvent>;
    /**
    
     * A function that is executed when a file is successfully uploaded.
    
    
     */
    onUploaded: EventEmitter<UploadedEvent>;
    /**
    
     * A function that is executed when an error occurs during the file upload.
    
    
     */
    onUploadError: EventEmitter<UploadErrorEvent>;
    /**
    
     * A function that is executed when the file upload is started.
    
    
     */
    onUploadStarted: EventEmitter<UploadStartedEvent>;
    /**
    
     * A function that is executed when one or several files are added to or removed from the selection.
    
    
     */
    onValueChanged: EventEmitter<ValueChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    abortUploadChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    acceptChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowCancelingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowedFileExtensionsChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    chunkSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dialogTriggerChange: EventEmitter<UserDefinedElement | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropZoneChange: EventEmitter<UserDefinedElement | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    inputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    invalidFileExtensionMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    invalidMaxFileSizeMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    invalidMinFileSizeMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isDirtyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxFileSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minFileSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    multipleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    progressChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readyToUploadMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showFileListChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadAbortedMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadChunkChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadCustomDataChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadedMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadFailedMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadFileChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadHeadersChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadMethodChange: EventEmitter<UploadHttpMethod>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadModeChange: EventEmitter<FileUploadMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadUrlChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<ValidationStatus>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxFileUploader;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFileUploaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxFileUploaderComponent, "dx-file-uploader", never, { "abortUpload": { "alias": "abortUpload"; "required": false; }; "accept": { "alias": "accept"; "required": false; }; "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "allowCanceling": { "alias": "allowCanceling"; "required": false; }; "allowedFileExtensions": { "alias": "allowedFileExtensions"; "required": false; }; "chunkSize": { "alias": "chunkSize"; "required": false; }; "dialogTrigger": { "alias": "dialogTrigger"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "dropZone": { "alias": "dropZone"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "inputAttr": { "alias": "inputAttr"; "required": false; }; "invalidFileExtensionMessage": { "alias": "invalidFileExtensionMessage"; "required": false; }; "invalidMaxFileSizeMessage": { "alias": "invalidMaxFileSizeMessage"; "required": false; }; "invalidMinFileSizeMessage": { "alias": "invalidMinFileSizeMessage"; "required": false; }; "isDirty": { "alias": "isDirty"; "required": false; }; "isValid": { "alias": "isValid"; "required": false; }; "labelText": { "alias": "labelText"; "required": false; }; "maxFileSize": { "alias": "maxFileSize"; "required": false; }; "minFileSize": { "alias": "minFileSize"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "name": { "alias": "name"; "required": false; }; "progress": { "alias": "progress"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "readyToUploadMessage": { "alias": "readyToUploadMessage"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "selectButtonText": { "alias": "selectButtonText"; "required": false; }; "showFileList": { "alias": "showFileList"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "uploadAbortedMessage": { "alias": "uploadAbortedMessage"; "required": false; }; "uploadButtonText": { "alias": "uploadButtonText"; "required": false; }; "uploadChunk": { "alias": "uploadChunk"; "required": false; }; "uploadCustomData": { "alias": "uploadCustomData"; "required": false; }; "uploadedMessage": { "alias": "uploadedMessage"; "required": false; }; "uploadFailedMessage": { "alias": "uploadFailedMessage"; "required": false; }; "uploadFile": { "alias": "uploadFile"; "required": false; }; "uploadHeaders": { "alias": "uploadHeaders"; "required": false; }; "uploadMethod": { "alias": "uploadMethod"; "required": false; }; "uploadMode": { "alias": "uploadMode"; "required": false; }; "uploadUrl": { "alias": "uploadUrl"; "required": false; }; "validationError": { "alias": "validationError"; "required": false; }; "validationErrors": { "alias": "validationErrors"; "required": false; }; "validationStatus": { "alias": "validationStatus"; "required": false; }; "value": { "alias": "value"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onBeforeSend": "onBeforeSend"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onDropZoneEnter": "onDropZoneEnter"; "onDropZoneLeave": "onDropZoneLeave"; "onFilesUploaded": "onFilesUploaded"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onProgress": "onProgress"; "onUploadAborted": "onUploadAborted"; "onUploaded": "onUploaded"; "onUploadError": "onUploadError"; "onUploadStarted": "onUploadStarted"; "onValueChanged": "onValueChanged"; "abortUploadChange": "abortUploadChange"; "acceptChange": "acceptChange"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowCancelingChange": "allowCancelingChange"; "allowedFileExtensionsChange": "allowedFileExtensionsChange"; "chunkSizeChange": "chunkSizeChange"; "dialogTriggerChange": "dialogTriggerChange"; "disabledChange": "disabledChange"; "dropZoneChange": "dropZoneChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "inputAttrChange": "inputAttrChange"; "invalidFileExtensionMessageChange": "invalidFileExtensionMessageChange"; "invalidMaxFileSizeMessageChange": "invalidMaxFileSizeMessageChange"; "invalidMinFileSizeMessageChange": "invalidMinFileSizeMessageChange"; "isDirtyChange": "isDirtyChange"; "isValidChange": "isValidChange"; "labelTextChange": "labelTextChange"; "maxFileSizeChange": "maxFileSizeChange"; "minFileSizeChange": "minFileSizeChange"; "multipleChange": "multipleChange"; "nameChange": "nameChange"; "progressChange": "progressChange"; "readOnlyChange": "readOnlyChange"; "readyToUploadMessageChange": "readyToUploadMessageChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectButtonTextChange": "selectButtonTextChange"; "showFileListChange": "showFileListChange"; "tabIndexChange": "tabIndexChange"; "uploadAbortedMessageChange": "uploadAbortedMessageChange"; "uploadButtonTextChange": "uploadButtonTextChange"; "uploadChunkChange": "uploadChunkChange"; "uploadCustomDataChange": "uploadCustomDataChange"; "uploadedMessageChange": "uploadedMessageChange"; "uploadFailedMessageChange": "uploadFailedMessageChange"; "uploadFileChange": "uploadFileChange"; "uploadHeadersChange": "uploadHeadersChange"; "uploadMethodChange": "uploadMethodChange"; "uploadModeChange": "uploadModeChange"; "uploadUrlChange": "uploadUrlChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, never, never, false, never>;
}
export declare class DxFileUploaderModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFileUploaderModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxFileUploaderModule, [typeof DxFileUploaderComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule], [typeof DxFileUploaderComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxFileUploaderModule>;
}
export { DxFileUploaderTypes };
