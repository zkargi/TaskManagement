/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { ExportFormat, HorizontalAlignment, VerticalAlignment, VerticalEdge } from 'devextreme/common';
import { DashStyle, Font, HatchDirection, Palette, PaletteExtensionMode, TextOverflow, Theme, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { DisposingEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, LinkClickEvent, LinkHoverEvent, NodeClickEvent, NodeHoverEvent, OptionChangedEvent, SankeyColorMode } from 'devextreme/viz/sankey';
import DxSankey from 'devextreme/viz/sankey';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import type * as DxSankeyTypes from "devextreme/viz/sankey_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * The Sankey is a UI component that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is.

 */
export declare class DxSankeyComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSankey;
    /**
     * Specifies adaptive layout properties.
    
     */
    get adaptiveLayout(): {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    };
    set adaptiveLayout(value: {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    });
    /**
     * Aligns node columns vertically.
    
     */
    get alignment(): VerticalAlignment | Array<VerticalAlignment>;
    set alignment(value: VerticalAlignment | Array<VerticalAlignment>);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Store | DataSource | DataSourceOptions | null | string | Array<any>;
    set dataSource(value: Store | DataSource | DataSourceOptions | null | string | Array<any>);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Configures the exporting and printing features.
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * Specifies whether nodes and links change their style when they are hovered over or pressed.
    
     */
    get hoverEnabled(): boolean;
    set hoverEnabled(value: boolean);
    /**
     * Configures sankey nodes&apos; labels.
    
     */
    get label(): {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        horizontalOffset?: number;
        overlappingBehavior?: TextOverflow;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        useNodeColors?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    };
    set label(value: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        horizontalOffset?: number;
        overlappingBehavior?: TextOverflow;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        useNodeColors?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    });
    /**
     * Configures sankey links&apos; appearance.
    
     */
    get link(): {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        colorMode?: SankeyColorMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
    };
    set link(value: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        colorMode?: SankeyColorMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
    });
    /**
     * Configures the loading indicator.
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * Generates space around the UI component.
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * Configures sankey nodes&apos; appearance.
    
     */
    get node(): {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number | undefined;
        };
        opacity?: number;
        padding?: number;
        width?: number;
    };
    set node(value: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number | undefined;
        };
        opacity?: number;
        padding?: number;
        width?: number;
    });
    /**
     * Sets the palette to be used to colorize sankey nodes.
    
     */
    get palette(): Palette | string | Array<string>;
    set palette(value: Palette | string | Array<string>);
    /**
     * Specifies how to extend the palette when it contains less colors than the number of sankey nodes.
    
     */
    get paletteExtensionMode(): PaletteExtensionMode;
    set paletteExtensionMode(value: PaletteExtensionMode);
    /**
     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s size in pixels.
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * Specifies nodes&apos; sorting order in their columns.
    
     */
    get sortData(): any | undefined;
    set sortData(value: any | undefined);
    /**
     * Specifies which data source field provides links&apos; source nodes.
    
     */
    get sourceField(): string;
    set sourceField(value: string);
    /**
     * Specifies which data source field provides links&apos; target nodes.
    
     */
    get targetField(): string;
    set targetField(value: string);
    /**
     * Sets the name of the theme the UI component uses.
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * Configures the UI component&apos;s title.
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: UserDefinedElement | string | undefined;
        cornerRadius?: number;
        customizeLinkTooltip?: Function | undefined;
        customizeNodeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        linkTooltipTemplate?: any | undefined;
        nodeTooltipTemplate?: any | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: UserDefinedElement | string | undefined;
        cornerRadius?: number;
        customizeLinkTooltip?: Function | undefined;
        customizeNodeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        linkTooltipTemplate?: any | undefined;
        nodeTooltipTemplate?: any | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * Specifies which data source field provides links&apos; weights.
    
     */
    get weightField(): string;
    set weightField(value: string);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is executed when the UI component&apos;s rendering has finished.
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * A function that is executed after the UI component is exported.
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * A function that is executed before the UI component is exported.
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * A function that is executed before a file with exported UI component is saved to the user&apos;s local storage.
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * A function that is executed when an error or warning occurs.
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed when a sankey link is clicked or tapped.
    
    
     */
    onLinkClick: EventEmitter<LinkClickEvent>;
    /**
    
     * A function that is executed after the pointer enters or leaves a sankey link.
    
    
     */
    onLinkHoverChanged: EventEmitter<LinkHoverEvent>;
    /**
    
     * A function that is executed when a sankey node is clicked or tapped.
    
    
     */
    onNodeClick: EventEmitter<NodeClickEvent>;
    /**
    
     * A function that is executed after the pointer enters or leaves a sankey node.
    
    
     */
    onNodeHoverChanged: EventEmitter<NodeHoverEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptiveLayoutChange: EventEmitter<{
        height?: number;
        keepLabels?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    alignmentChange: EventEmitter<VerticalAlignment | Array<VerticalAlignment>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Store | DataSource | DataSourceOptions | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        horizontalOffset?: number;
        overlappingBehavior?: TextOverflow;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        useNodeColors?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    linkChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        colorMode?: SankeyColorMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nodeChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
            hatching?: {
                direction?: HatchDirection;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number | undefined;
        };
        opacity?: number;
        padding?: number;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteChange: EventEmitter<Palette | string | Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteExtensionModeChange: EventEmitter<PaletteExtensionMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortDataChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sourceFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    targetFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: UserDefinedElement | string | undefined;
        cornerRadius?: number;
        customizeLinkTooltip?: Function | undefined;
        customizeNodeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        linkTooltipTemplate?: any | undefined;
        nodeTooltipTemplate?: any | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    weightFieldChange: EventEmitter<string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSankey;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSankeyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSankeyComponent, "dx-sankey", never, { "adaptiveLayout": { "alias": "adaptiveLayout"; "required": false; }; "alignment": { "alias": "alignment"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "export": { "alias": "export"; "required": false; }; "hoverEnabled": { "alias": "hoverEnabled"; "required": false; }; "label": { "alias": "label"; "required": false; }; "link": { "alias": "link"; "required": false; }; "loadingIndicator": { "alias": "loadingIndicator"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "node": { "alias": "node"; "required": false; }; "palette": { "alias": "palette"; "required": false; }; "paletteExtensionMode": { "alias": "paletteExtensionMode"; "required": false; }; "pathModified": { "alias": "pathModified"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "size": { "alias": "size"; "required": false; }; "sortData": { "alias": "sortData"; "required": false; }; "sourceField": { "alias": "sourceField"; "required": false; }; "targetField": { "alias": "targetField"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "title": { "alias": "title"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "weightField": { "alias": "weightField"; "required": false; }; }, { "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onLinkClick": "onLinkClick"; "onLinkHoverChanged": "onLinkHoverChanged"; "onNodeClick": "onNodeClick"; "onNodeHoverChanged": "onNodeHoverChanged"; "onOptionChanged": "onOptionChanged"; "adaptiveLayoutChange": "adaptiveLayoutChange"; "alignmentChange": "alignmentChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "hoverEnabledChange": "hoverEnabledChange"; "labelChange": "labelChange"; "linkChange": "linkChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "nodeChange": "nodeChange"; "paletteChange": "paletteChange"; "paletteExtensionModeChange": "paletteExtensionModeChange"; "pathModifiedChange": "pathModifiedChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "sizeChange": "sizeChange"; "sortDataChange": "sortDataChange"; "sourceFieldChange": "sourceFieldChange"; "targetFieldChange": "targetFieldChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "weightFieldChange": "weightFieldChange"; }, never, never, false, never>;
}
export declare class DxSankeyModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSankeyModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSankeyModule, [typeof DxSankeyComponent], [typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoExportModule, typeof i1.DxoLabelModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoShadowModule, typeof i1.DxoLinkModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoMarginModule, typeof i1.DxoNodeModule, typeof i1.DxoSizeModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxSankeyComponent, typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoExportModule, typeof i1.DxoLabelModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoShadowModule, typeof i1.DxoLinkModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoMarginModule, typeof i1.DxoNodeModule, typeof i1.DxoSizeModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSankeyModule>;
}
export { DxSankeyTypes };
