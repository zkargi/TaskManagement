/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { ScrollDirection } from 'devextreme/common';
import { DisposingEvent, InitializedEvent, OptionChangedEvent, PullDownEvent, ReachBottomEvent, ScrollEvent, UpdatedEvent } from 'devextreme/ui/scroll_view';
import DxScrollView from 'devextreme/ui/scroll_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxScrollViewTypes from "devextreme/ui/scroll_view_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
/**
 * The ScrollView is a UI component that enables a user to scroll its content.

 */
export declare class DxScrollViewComponent extends DxComponent implements OnDestroy {
    instance: DxScrollView;
    /**
     * A Boolean value specifying whether to enable or disable the bounce-back effect.
    
     */
    get bounceEnabled(): boolean;
    set bounceEnabled(value: boolean);
    /**
     * A string value specifying the available scrolling directions.
    
     */
    get direction(): ScrollDirection;
    set direction(value: ScrollDirection);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.
    
     */
    get pulledDownText(): string;
    set pulledDownText(value: string);
    /**
     * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.
    
     */
    get pullingDownText(): string;
    set pullingDownText(value: string);
    /**
     * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.
    
     */
    get reachBottomText(): string;
    set reachBottomText(value: string);
    /**
     * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.
    
     */
    get refreshingText(): string;
    set refreshingText(value: string);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * A Boolean value specifying whether or not an end user can scroll the UI component content swiping it up or down. Applies only if useNative is false
    
     */
    get scrollByContent(): boolean;
    set scrollByContent(value: boolean);
    /**
     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.
    
     */
    get scrollByThumb(): boolean;
    set scrollByThumb(value: boolean);
    /**
     * Specifies when the UI component shows the scrollbar.
    
     */
    get showScrollbar(): string;
    set showScrollbar(value: string);
    /**
     * Indicates whether to use native or simulated scrolling.
    
     */
    get useNative(): boolean;
    set useNative(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed. Supported on mobile devices only.
    
    
     */
    onPullDown: EventEmitter<PullDownEvent>;
    /**
    
     * A function that is executed when the content is scrolled down to the bottom.
    
    
     */
    onReachBottom: EventEmitter<ReachBottomEvent>;
    /**
    
     * A function that is executed on each scroll gesture.
    
    
     */
    onScroll: EventEmitter<ScrollEvent>;
    /**
    
     * A function that is executed each time the UI component is updated.
    
    
     */
    onUpdated: EventEmitter<UpdatedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    bounceEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    directionChange: EventEmitter<ScrollDirection>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    reachBottomTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByContentChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByThumbChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showScrollbarChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScrollView;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxScrollViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxScrollViewComponent, "dx-scroll-view", never, { "bounceEnabled": { "alias": "bounceEnabled"; "required": false; }; "direction": { "alias": "direction"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "height": { "alias": "height"; "required": false; }; "pulledDownText": { "alias": "pulledDownText"; "required": false; }; "pullingDownText": { "alias": "pullingDownText"; "required": false; }; "reachBottomText": { "alias": "reachBottomText"; "required": false; }; "refreshingText": { "alias": "refreshingText"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "scrollByContent": { "alias": "scrollByContent"; "required": false; }; "scrollByThumb": { "alias": "scrollByThumb"; "required": false; }; "showScrollbar": { "alias": "showScrollbar"; "required": false; }; "useNative": { "alias": "useNative"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onPullDown": "onPullDown"; "onReachBottom": "onReachBottom"; "onScroll": "onScroll"; "onUpdated": "onUpdated"; "bounceEnabledChange": "bounceEnabledChange"; "directionChange": "directionChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "pulledDownTextChange": "pulledDownTextChange"; "pullingDownTextChange": "pullingDownTextChange"; "reachBottomTextChange": "reachBottomTextChange"; "refreshingTextChange": "refreshingTextChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollByContentChange": "scrollByContentChange"; "scrollByThumbChange": "scrollByThumbChange"; "showScrollbarChange": "showScrollbarChange"; "useNativeChange": "useNativeChange"; "widthChange": "widthChange"; }, never, ["*"], false, never>;
}
export declare class DxScrollViewModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxScrollViewModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxScrollViewModule, [typeof DxScrollViewComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule], [typeof DxScrollViewComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxScrollViewModule>;
}
export { DxScrollViewTypes };
