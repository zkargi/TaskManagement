/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import { AxisScaleType, ChartsDataType, DashStyle, DiscreteAxisDivisionMode, Font, LabelOverlap, TimeInterval, VisualRange } from 'devextreme/common/charts';
import { Format } from 'devextreme/localization';
import { ValueAxisVisualRangeUpdateMode } from 'devextreme/viz/polar_chart';
import { ChartAxisScale } from 'devextreme/viz/range_selector';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiConstantLineComponent } from './constant-line-dxi';
import { DxiStripComponent } from './strip-dxi';
import * as i0 from "@angular/core";
export declare class DxoValueAxisComponent extends NestedOption implements OnDestroy, OnInit {
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get axisDivisionFactor(): number;
    set axisDivisionFactor(value: number);
    get categories(): Array<number | string | Date>;
    set categories(value: Array<number | string | Date>);
    get color(): string;
    set color(value: string);
    get constantLines(): Array<any | {
        color?: string;
        dashStyle?: DashStyle;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            text?: string | undefined;
            visible?: boolean;
        };
        value?: Date | number | string | undefined;
        width?: number;
    }>;
    set constantLines(value: Array<any | {
        color?: string;
        dashStyle?: DashStyle;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            text?: string | undefined;
            visible?: boolean;
        };
        value?: Date | number | string | undefined;
        width?: number;
    }>);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    });
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean;
    set endOnTick(value: boolean);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        customizeHint?: Function;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    };
    set label(value: {
        customizeHint?: Function;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    });
    get linearThreshold(): number | undefined;
    set linearThreshold(value: number | undefined);
    get logarithmBase(): number;
    set logarithmBase(value: number);
    get maxValueMargin(): number | undefined;
    set maxValueMargin(value: number | undefined);
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickCount(): number | undefined;
    set minorTickCount(value: number | undefined);
    get minorTickInterval(): TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minorTickInterval(value: TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minValueMargin(): number | undefined;
    set minValueMargin(value: number | undefined);
    get minVisualRangeLength(): TimeInterval | number | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minVisualRangeLength(value: TimeInterval | number | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get showZero(): boolean | undefined;
    set showZero(value: boolean | undefined);
    get strips(): Array<any | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            text?: string | undefined;
        };
        startValue?: Date | number | string | undefined;
    }>;
    set strips(value: Array<any | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            text?: string | undefined;
        };
        startValue?: Date | number | string | undefined;
    }>);
    get stripStyle(): {
        label?: {
            font?: Font;
        };
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
        };
    });
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get tickInterval(): TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set tickInterval(value: TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get type(): AxisScaleType | undefined | ChartAxisScale;
    set type(value: AxisScaleType | undefined | ChartAxisScale);
    get valueMarginsEnabled(): boolean;
    set valueMarginsEnabled(value: boolean);
    get valueType(): ChartsDataType | undefined;
    set valueType(value: ChartsDataType | undefined);
    get visible(): boolean;
    set visible(value: boolean);
    get visualRange(): VisualRange | Array<number | string | Date>;
    set visualRange(value: VisualRange | Array<number | string | Date>);
    get visualRangeUpdateMode(): ValueAxisVisualRangeUpdateMode;
    set visualRangeUpdateMode(value: ValueAxisVisualRangeUpdateMode);
    get wholeRange(): VisualRange | undefined | Array<number | string | Date>;
    set wholeRange(value: VisualRange | undefined | Array<number | string | Date>);
    get width(): number;
    set width(value: number);
    get max(): number | undefined;
    set max(value: number | undefined);
    get min(): number | undefined;
    set min(value: number | undefined);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visualRangeChange: EventEmitter<VisualRange | Array<number | string | Date>>;
    protected get _optionPath(): string;
    get constantLinesChildren(): QueryList<DxiConstantLineComponent>;
    set constantLinesChildren(value: QueryList<DxiConstantLineComponent>);
    get stripsChildren(): QueryList<DxiStripComponent>;
    set stripsChildren(value: QueryList<DxiStripComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoValueAxisComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoValueAxisComponent, "dxo-value-axis", never, { "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "axisDivisionFactor": { "alias": "axisDivisionFactor"; "required": false; }; "categories": { "alias": "categories"; "required": false; }; "color": { "alias": "color"; "required": false; }; "constantLines": { "alias": "constantLines"; "required": false; }; "constantLineStyle": { "alias": "constantLineStyle"; "required": false; }; "discreteAxisDivisionMode": { "alias": "discreteAxisDivisionMode"; "required": false; }; "endOnTick": { "alias": "endOnTick"; "required": false; }; "grid": { "alias": "grid"; "required": false; }; "inverted": { "alias": "inverted"; "required": false; }; "label": { "alias": "label"; "required": false; }; "linearThreshold": { "alias": "linearThreshold"; "required": false; }; "logarithmBase": { "alias": "logarithmBase"; "required": false; }; "maxValueMargin": { "alias": "maxValueMargin"; "required": false; }; "minorGrid": { "alias": "minorGrid"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "minorTickCount": { "alias": "minorTickCount"; "required": false; }; "minorTickInterval": { "alias": "minorTickInterval"; "required": false; }; "minValueMargin": { "alias": "minValueMargin"; "required": false; }; "minVisualRangeLength": { "alias": "minVisualRangeLength"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "showZero": { "alias": "showZero"; "required": false; }; "strips": { "alias": "strips"; "required": false; }; "stripStyle": { "alias": "stripStyle"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "tickInterval": { "alias": "tickInterval"; "required": false; }; "type": { "alias": "type"; "required": false; }; "valueMarginsEnabled": { "alias": "valueMarginsEnabled"; "required": false; }; "valueType": { "alias": "valueType"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visualRange": { "alias": "visualRange"; "required": false; }; "visualRangeUpdateMode": { "alias": "visualRangeUpdateMode"; "required": false; }; "wholeRange": { "alias": "wholeRange"; "required": false; }; "width": { "alias": "width"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; }, { "visualRangeChange": "visualRangeChange"; }, ["constantLinesChildren", "stripsChildren"], never, false, never>;
}
export declare class DxoValueAxisModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoValueAxisModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoValueAxisModule, [typeof DxoValueAxisComponent], never, [typeof DxoValueAxisComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoValueAxisModule>;
}
