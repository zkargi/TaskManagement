/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { HorizontalAlignment, Position, VerticalAlignment } from 'devextreme/common';
import { ChartsAxisLabelOverlap, DashStyle, DiscreteAxisDivisionMode, Font, LabelOverlap, RelativePosition, ScaleBreakLineStyle, TextOverflow, WordWrap } from 'devextreme/common/charts';
import { AggregatedPointsPosition, ChartLabelDisplayMode } from 'devextreme/viz/chart';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoCommonAxisSettingsComponent extends NestedOption implements OnDestroy, OnInit {
    get aggregatedPointsPosition(): AggregatedPointsPosition;
    set aggregatedPointsPosition(value: AggregatedPointsPosition);
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get breakStyle(): {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    });
    get color(): string;
    set color(value: string);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            position?: RelativePosition;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            position?: RelativePosition;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    });
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean | undefined;
    set endOnTick(value: boolean | undefined);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        alignment?: HorizontalAlignment | undefined;
        displayMode?: ChartLabelDisplayMode;
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: ChartsAxisLabelOverlap;
        position?: RelativePosition | Position;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    } | {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    };
    set label(value: {
        alignment?: HorizontalAlignment | undefined;
        displayMode?: ChartLabelDisplayMode;
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: ChartsAxisLabelOverlap;
        position?: RelativePosition | Position;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    } | {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    });
    get maxValueMargin(): number | undefined;
    set maxValueMargin(value: number | undefined);
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minValueMargin(): number | undefined;
    set minValueMargin(value: number | undefined);
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get placeholderSize(): number;
    set placeholderSize(value: number);
    get stripStyle(): {
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    });
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get title(): {
        alignment?: HorizontalAlignment;
        font?: Font;
        margin?: number;
        textOverflow?: TextOverflow;
        wordWrap?: WordWrap;
    };
    set title(value: {
        alignment?: HorizontalAlignment;
        font?: Font;
        margin?: number;
        textOverflow?: TextOverflow;
        wordWrap?: WordWrap;
    });
    get valueMarginsEnabled(): boolean;
    set valueMarginsEnabled(value: boolean);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCommonAxisSettingsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoCommonAxisSettingsComponent, "dxo-common-axis-settings", never, { "aggregatedPointsPosition": { "alias": "aggregatedPointsPosition"; "required": false; }; "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "breakStyle": { "alias": "breakStyle"; "required": false; }; "color": { "alias": "color"; "required": false; }; "constantLineStyle": { "alias": "constantLineStyle"; "required": false; }; "discreteAxisDivisionMode": { "alias": "discreteAxisDivisionMode"; "required": false; }; "endOnTick": { "alias": "endOnTick"; "required": false; }; "grid": { "alias": "grid"; "required": false; }; "inverted": { "alias": "inverted"; "required": false; }; "label": { "alias": "label"; "required": false; }; "maxValueMargin": { "alias": "maxValueMargin"; "required": false; }; "minorGrid": { "alias": "minorGrid"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "minValueMargin": { "alias": "minValueMargin"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "placeholderSize": { "alias": "placeholderSize"; "required": false; }; "stripStyle": { "alias": "stripStyle"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "title": { "alias": "title"; "required": false; }; "valueMarginsEnabled": { "alias": "valueMarginsEnabled"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoCommonAxisSettingsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCommonAxisSettingsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoCommonAxisSettingsModule, [typeof DxoCommonAxisSettingsComponent], never, [typeof DxoCommonAxisSettingsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoCommonAxisSettingsModule>;
}
