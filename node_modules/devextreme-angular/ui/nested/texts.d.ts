/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { NestedOptionHost } from 'devextreme-angular/core';
import { DxoGanttHeaderFilterTexts } from './base/gantt-header-filter-texts';
import * as i0 from "@angular/core";
export declare class DxoTextsComponent extends DxoGanttHeaderFilterTexts implements OnDestroy, OnInit {
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTextsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoTextsComponent, "dxo-texts", never, { "fix": { "alias": "fix"; "required": false; }; "leftPosition": { "alias": "leftPosition"; "required": false; }; "rightPosition": { "alias": "rightPosition"; "required": false; }; "unfix": { "alias": "unfix"; "required": false; }; "addRow": { "alias": "addRow"; "required": false; }; "cancelAllChanges": { "alias": "cancelAllChanges"; "required": false; }; "cancelRowChanges": { "alias": "cancelRowChanges"; "required": false; }; "confirmDeleteMessage": { "alias": "confirmDeleteMessage"; "required": false; }; "confirmDeleteTitle": { "alias": "confirmDeleteTitle"; "required": false; }; "deleteRow": { "alias": "deleteRow"; "required": false; }; "editRow": { "alias": "editRow"; "required": false; }; "saveAllChanges": { "alias": "saveAllChanges"; "required": false; }; "saveRowChanges": { "alias": "saveRowChanges"; "required": false; }; "undeleteRow": { "alias": "undeleteRow"; "required": false; }; "validationCancelChanges": { "alias": "validationCancelChanges"; "required": false; }; "exportAll": { "alias": "exportAll"; "required": false; }; "exportSelectedRows": { "alias": "exportSelectedRows"; "required": false; }; "exportTo": { "alias": "exportTo"; "required": false; }; "clearFilter": { "alias": "clearFilter"; "required": false; }; "createFilter": { "alias": "createFilter"; "required": false; }; "filterEnabledHint": { "alias": "filterEnabledHint"; "required": false; }; "groupByThisColumn": { "alias": "groupByThisColumn"; "required": false; }; "groupContinuedMessage": { "alias": "groupContinuedMessage"; "required": false; }; "groupContinuesMessage": { "alias": "groupContinuesMessage"; "required": false; }; "ungroup": { "alias": "ungroup"; "required": false; }; "ungroupAll": { "alias": "ungroupAll"; "required": false; }; "cancel": { "alias": "cancel"; "required": false; }; "emptyValue": { "alias": "emptyValue"; "required": false; }; "ok": { "alias": "ok"; "required": false; }; "avg": { "alias": "avg"; "required": false; }; "avgOtherColumn": { "alias": "avgOtherColumn"; "required": false; }; "count": { "alias": "count"; "required": false; }; "max": { "alias": "max"; "required": false; }; "maxOtherColumn": { "alias": "maxOtherColumn"; "required": false; }; "min": { "alias": "min"; "required": false; }; "minOtherColumn": { "alias": "minOtherColumn"; "required": false; }; "sum": { "alias": "sum"; "required": false; }; "sumOtherColumn": { "alias": "sumOtherColumn"; "required": false; }; "allFields": { "alias": "allFields"; "required": false; }; "columnFields": { "alias": "columnFields"; "required": false; }; "dataFields": { "alias": "dataFields"; "required": false; }; "filterFields": { "alias": "filterFields"; "required": false; }; "rowFields": { "alias": "rowFields"; "required": false; }; "columnFieldArea": { "alias": "columnFieldArea"; "required": false; }; "dataFieldArea": { "alias": "dataFieldArea"; "required": false; }; "filterFieldArea": { "alias": "filterFieldArea"; "required": false; }; "rowFieldArea": { "alias": "rowFieldArea"; "required": false; }; "collapseAll": { "alias": "collapseAll"; "required": false; }; "dataNotAvailable": { "alias": "dataNotAvailable"; "required": false; }; "expandAll": { "alias": "expandAll"; "required": false; }; "exportToExcel": { "alias": "exportToExcel"; "required": false; }; "grandTotal": { "alias": "grandTotal"; "required": false; }; "noData": { "alias": "noData"; "required": false; }; "removeAllSorting": { "alias": "removeAllSorting"; "required": false; }; "showFieldChooser": { "alias": "showFieldChooser"; "required": false; }; "sortColumnBySummary": { "alias": "sortColumnBySummary"; "required": false; }; "sortRowBySummary": { "alias": "sortRowBySummary"; "required": false; }; "total": { "alias": "total"; "required": false; }; "addRowToNode": { "alias": "addRowToNode"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoTextsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTextsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoTextsModule, [typeof DxoTextsComponent], never, [typeof DxoTextsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoTextsModule>;
}
