/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { Orientation } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { ContentReadyEvent, DisposingEvent, dxSplitterItem, InitializedEvent, ItemClickEvent, ItemCollapsedEvent, ItemContextMenuEvent, ItemExpandedEvent, ItemRenderedEvent, OptionChangedEvent, Properties as dxSplitterOptions, ResizeEndEvent, ResizeEvent, ResizeStartEvent } from 'devextreme/ui/splitter';
import DxSplitter from 'devextreme/ui/splitter';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import type * as DxSplitterTypes from "devextreme/ui/splitter_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
export { ExplicitTypes } from 'devextreme/ui/splitter';
/**
 * Splitter is a UI component that allows you to divide a page or section into multiple adjustable panes.

 */
export declare class DxSplitterComponent<TItem = any, TKey = any> extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSplitter<TItem, TKey>;
    /**
     * Specifies whether to allow the Splitter to take focus and allow keyboard navigation.
    
     */
    get allowKeyboardNavigation(): boolean;
    set allowKeyboardNavigation(value: boolean);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Store | DataSource | DataSourceOptions | null | string | Array<dxSplitterItem>;
    set dataSource(value: Store | DataSource | DataSourceOptions | null | string | Array<dxSplitterItem>);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * An array of items (panes) displayed by the UI component.
    
     */
    get items(): Array<any | {
        collapsed?: boolean;
        collapsedSize?: number | string | undefined;
        collapsible?: boolean;
        maxSize?: number | string | undefined;
        minSize?: number | string | undefined;
        resizable?: boolean;
        size?: number | string | undefined;
        splitter?: dxSplitterOptions | undefined;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    set items(value: Array<any | {
        collapsed?: boolean;
        collapsedSize?: number | string | undefined;
        collapsible?: boolean;
        maxSize?: number | string | undefined;
        minSize?: number | string | undefined;
        resizable?: boolean;
        size?: number | string | undefined;
        splitter?: dxSplitterOptions | undefined;
        template?: any;
        text?: string;
        visible?: boolean;
    }>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies item orientation (layout).
    
     */
    get orientation(): Orientation;
    set orientation(value: Orientation);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the size of a separator bar in pixels.
    
     */
    get separatorSize(): number;
    set separatorSize(value: number);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed when an item (pane) is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * A function that is executed after an item (pane) is collapsed.
    
    
     */
    onItemCollapsed: EventEmitter<ItemCollapsedEvent>;
    /**
    
     * A function that is executed when an item (pane) is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<ItemContextMenuEvent>;
    /**
    
     * A function that is executed after an item (pane) is expanded.
    
    
     */
    onItemExpanded: EventEmitter<ItemExpandedEvent>;
    /**
    
     * A function that is executed after an item (pane) is rendered.
    
    
     */
    onItemRendered: EventEmitter<ItemRenderedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed each time an item (pane) is resized by one pixel.
    
    
     */
    onResize: EventEmitter<ResizeEvent>;
    /**
    
     * A function that is called when resizing ends.
    
    
     */
    onResizeEnd: EventEmitter<ResizeEndEvent>;
    /**
    
     * A function that is called when resizing starts.
    
    
     */
    onResizeStart: EventEmitter<ResizeStartEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowKeyboardNavigationChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Store | DataSource | DataSourceOptions | null | string | Array<dxSplitterItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        collapsed?: boolean;
        collapsedSize?: number | string | undefined;
        collapsible?: boolean;
        maxSize?: number | string | undefined;
        minSize?: number | string | undefined;
        resizable?: boolean;
        size?: number | string | undefined;
        splitter?: dxSplitterOptions | undefined;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    orientationChange: EventEmitter<Orientation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    separatorSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSplitter<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSplitterComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSplitterComponent<any, any>, "dx-splitter", never, { "allowKeyboardNavigation": { "alias": "allowKeyboardNavigation"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemTemplate": { "alias": "itemTemplate"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "separatorSize": { "alias": "separatorSize"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemCollapsed": "onItemCollapsed"; "onItemContextMenu": "onItemContextMenu"; "onItemExpanded": "onItemExpanded"; "onItemRendered": "onItemRendered"; "onOptionChanged": "onOptionChanged"; "onResize": "onResize"; "onResizeEnd": "onResizeEnd"; "onResizeStart": "onResizeStart"; "allowKeyboardNavigationChange": "allowKeyboardNavigationChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "orientationChange": "orientationChange"; "rtlEnabledChange": "rtlEnabledChange"; "separatorSizeChange": "separatorSizeChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never, false, never>;
}
export declare class DxSplitterModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSplitterModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSplitterModule, [typeof DxSplitterComponent], [typeof i1.DxiItemModule, typeof i1.DxoSplitterModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxSplitterComponent, typeof i1.DxiItemModule, typeof i1.DxoSplitterModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSplitterModule>;
}
export { DxSplitterTypes };
