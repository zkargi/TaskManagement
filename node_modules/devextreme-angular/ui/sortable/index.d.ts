/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { DragDirection, DragHighlight, Orientation } from 'devextreme/common';
import { UserDefinedElement } from 'devextreme/core/element';
import { AddEvent, DisposingEvent, DragChangeEvent, DragEndEvent, DragMoveEvent, DragStartEvent, InitializedEvent, OptionChangedEvent, RemoveEvent, ReorderEvent } from 'devextreme/ui/sortable';
import DxSortable from 'devextreme/ui/sortable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxSortableTypes from "devextreme/ui/sortable_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * Sortable is a user interface utility that allows a UI component&apos;s items to be reordered via drag and drop gestures.

 */
export declare class DxSortableComponent extends DxComponent implements OnDestroy {
    instance: DxSortable;
    /**
     * Allows a user to drop an item inside another item.
    
     */
    get allowDropInsideItem(): boolean;
    set allowDropInsideItem(value: boolean);
    /**
     * Allows a user to reorder sortable items.
    
     */
    get allowReordering(): boolean;
    set allowReordering(value: boolean);
    /**
     * Enables automatic scrolling while dragging an item beyond the viewport.
    
     */
    get autoScroll(): boolean;
    set autoScroll(value: boolean);
    /**
     * Specifies a DOM element that limits the dragging area.
    
     */
    get boundary(): UserDefinedElement | string | undefined;
    set boundary(value: UserDefinedElement | string | undefined);
    /**
     * Specifies a custom container in which the draggable item should be rendered.
    
     */
    get container(): UserDefinedElement | string | undefined;
    set container(value: UserDefinedElement | string | undefined);
    /**
     * Specifies the cursor offset from the dragged item.
    
     */
    get cursorOffset(): string | {
        x?: number;
        y?: number;
    };
    set cursorOffset(value: string | {
        x?: number;
        y?: number;
    });
    /**
     * A container for custom data.
    
     */
    get data(): any | undefined;
    set data(value: any | undefined);
    /**
     * Specifies the directions in which an item can be dragged.
    
     */
    get dragDirection(): DragDirection;
    set dragDirection(value: DragDirection);
    /**
     * Specifies custom markup to be shown instead of the item being dragged.
    
     */
    get dragTemplate(): any | undefined;
    set dragTemplate(value: any | undefined);
    /**
     * Specifies how to highlight the item&apos;s drop position.
    
     */
    get dropFeedbackMode(): DragHighlight;
    set dropFeedbackMode(value: DragHighlight);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies a CSS selector for the items that can be dragged.
    
     */
    get filter(): string;
    set filter(value: string);
    /**
     * Allows you to group several UI components, so that users can drag and drop items between them.
    
     */
    get group(): string | undefined;
    set group(value: string | undefined);
    /**
     * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).
    
     */
    get handle(): string;
    set handle(value: string);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Notifies the UI component of the items&apos; orientation.
    
     */
    get itemOrientation(): Orientation;
    set itemOrientation(value: Orientation);
    /**
     * Moves an element in the HTML markup when it is dropped.
    
     */
    get moveItemOnDrop(): boolean;
    set moveItemOnDrop(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
    
     */
    get scrollSensitivity(): number;
    set scrollSensitivity(value: number);
    /**
     * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.
    
     */
    get scrollSpeed(): number;
    set scrollSpeed(value: number);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is called when a new item is added.
    
    
     */
    onAdd: EventEmitter<AddEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is called when the dragged item&apos;s position in the list is changed.
    
    
     */
    onDragChange: EventEmitter<DragChangeEvent>;
    /**
    
     * A function that is called when the drag gesture is finished.
    
    
     */
    onDragEnd: EventEmitter<DragEndEvent>;
    /**
    
     * A function that is called every time a draggable item is moved.
    
    
     */
    onDragMove: EventEmitter<DragMoveEvent>;
    /**
    
     * A function that is called when a drag gesture is initialized.
    
    
     */
    onDragStart: EventEmitter<DragStartEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is called when a draggable item is removed.
    
    
     */
    onRemove: EventEmitter<RemoveEvent>;
    /**
    
     * A function that is called when the draggable items are reordered.
    
    
     */
    onReorder: EventEmitter<ReorderEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowDropInsideItemChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowReorderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    boundaryChange: EventEmitter<UserDefinedElement | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<UserDefinedElement | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cursorOffsetChange: EventEmitter<string | {
        x?: number;
        y?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragDirectionChange: EventEmitter<DragDirection>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragTemplateChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropFeedbackModeChange: EventEmitter<DragHighlight>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    handleChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemOrientationChange: EventEmitter<Orientation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    moveItemOnDropChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSensitivityChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSpeedChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSortable;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSortableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSortableComponent, "dx-sortable", never, { "allowDropInsideItem": { "alias": "allowDropInsideItem"; "required": false; }; "allowReordering": { "alias": "allowReordering"; "required": false; }; "autoScroll": { "alias": "autoScroll"; "required": false; }; "boundary": { "alias": "boundary"; "required": false; }; "container": { "alias": "container"; "required": false; }; "cursorOffset": { "alias": "cursorOffset"; "required": false; }; "data": { "alias": "data"; "required": false; }; "dragDirection": { "alias": "dragDirection"; "required": false; }; "dragTemplate": { "alias": "dragTemplate"; "required": false; }; "dropFeedbackMode": { "alias": "dropFeedbackMode"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "group": { "alias": "group"; "required": false; }; "handle": { "alias": "handle"; "required": false; }; "height": { "alias": "height"; "required": false; }; "itemOrientation": { "alias": "itemOrientation"; "required": false; }; "moveItemOnDrop": { "alias": "moveItemOnDrop"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "scrollSensitivity": { "alias": "scrollSensitivity"; "required": false; }; "scrollSpeed": { "alias": "scrollSpeed"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onAdd": "onAdd"; "onDisposing": "onDisposing"; "onDragChange": "onDragChange"; "onDragEnd": "onDragEnd"; "onDragMove": "onDragMove"; "onDragStart": "onDragStart"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onRemove": "onRemove"; "onReorder": "onReorder"; "allowDropInsideItemChange": "allowDropInsideItemChange"; "allowReorderingChange": "allowReorderingChange"; "autoScrollChange": "autoScrollChange"; "boundaryChange": "boundaryChange"; "containerChange": "containerChange"; "cursorOffsetChange": "cursorOffsetChange"; "dataChange": "dataChange"; "dragDirectionChange": "dragDirectionChange"; "dragTemplateChange": "dragTemplateChange"; "dropFeedbackModeChange": "dropFeedbackModeChange"; "elementAttrChange": "elementAttrChange"; "filterChange": "filterChange"; "groupChange": "groupChange"; "handleChange": "handleChange"; "heightChange": "heightChange"; "itemOrientationChange": "itemOrientationChange"; "moveItemOnDropChange": "moveItemOnDropChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollSensitivityChange": "scrollSensitivityChange"; "scrollSpeedChange": "scrollSpeedChange"; "widthChange": "widthChange"; }, never, ["*"], false, never>;
}
export declare class DxSortableModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSortableModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSortableModule, [typeof DxSortableComponent], [typeof i1.DxoCursorOffsetModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxSortableComponent, typeof i1.DxoCursorOffsetModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSortableModule>;
}
export { DxSortableTypes };
