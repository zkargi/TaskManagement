/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { Orientation, PageOrientation } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { AutoZoomMode, Command, ConnectorLineEnd, ConnectorLineType, ContentReadyEvent, CustomCommand, CustomCommandEvent, DataLayoutType, DisposingEvent, InitializedEvent, ItemClickEvent, ItemDblClickEvent, OptionChangedEvent, PanelVisibility, RequestEditOperationEvent, RequestLayoutUpdateEvent, SelectionChangedEvent, ShapeCategory, ShapeType, ToolboxDisplayMode, Units } from 'devextreme/ui/diagram';
import DxDiagram from 'devextreme/ui/diagram';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCustomShapeComponent } from 'devextreme-angular/ui/nested';
import type * as DxDiagramTypes from "devextreme/ui/diagram_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.

 */
export declare class DxDiagramComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDiagram;
    /**
     * Specifies how the Diagram UI component automatically zooms the work area.
    
     */
    get autoZoomMode(): AutoZoomMode;
    set autoZoomMode(value: AutoZoomMode);
    /**
     * Configures the context menu&apos;s settings.
    
     */
    get contextMenu(): {
        commands?: Array<CustomCommand | Command>;
        enabled?: boolean;
    };
    set contextMenu(value: {
        commands?: Array<CustomCommand | Command>;
        enabled?: boolean;
    });
    /**
     * Configures the context toolbox&apos;s settings.
    
     */
    get contextToolbox(): {
        category?: ShapeCategory | string;
        displayMode?: ToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<ShapeType | string>;
        width?: number;
    };
    set contextToolbox(value: {
        category?: ShapeCategory | string;
        displayMode?: ToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<ShapeType | string>;
        width?: number;
    });
    /**
     * Provide access to an array of custom shapes.
    
     */
    get customShapes(): Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: ShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>;
    set customShapes(value: Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: ShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>);
    /**
     * Specifies a custom template for shapes.
    
     */
    get customShapeTemplate(): any;
    set customShapeTemplate(value: any);
    /**
     * Specifies a custom template for shapes in the toolbox.
    
     */
    get customShapeToolboxTemplate(): any;
    set customShapeToolboxTemplate(value: any);
    /**
     * Configures default item properties.
    
     */
    get defaultItemProperties(): {
        connectorLineEnd?: ConnectorLineEnd;
        connectorLineStart?: ConnectorLineEnd;
        connectorLineType?: ConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    };
    set defaultItemProperties(value: {
        connectorLineEnd?: ConnectorLineEnd;
        connectorLineStart?: ConnectorLineEnd;
        connectorLineType?: ConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    });
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.
    
     */
    get edges(): {
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    set edges(value: {
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    });
    /**
     * Specifies which editing operations a user can perform.
    
     */
    get editing(): {
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    };
    set editing(value: {
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    });
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Configures export settings.
    
     */
    get export(): {
        fileName?: string;
    };
    set export(value: {
        fileName?: string;
    });
    /**
     * Specifies whether or not to display the UI component in full-screen mode.
    
     */
    get fullScreen(): boolean;
    set fullScreen(value: boolean);
    /**
     * Specifies the grid pitch.
    
     */
    get gridSize(): number | {
        items?: Array<number>;
        value?: number;
    };
    set gridSize(value: number | {
        items?: Array<number>;
        value?: number;
    });
    /**
     * Indicates whether diagram content has unsaved changes.
    
     */
    get hasChanges(): boolean;
    set hasChanges(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Configures the history toolbar&apos;s settings.
    
     */
    get historyToolbar(): {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    };
    set historyToolbar(value: {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    });
    /**
     * Configures the main toolbar settings.
    
     */
    get mainToolbar(): {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    };
    set mainToolbar(value: {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    });
    /**
     * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.
    
     */
    get nodes(): {
        autoLayout?: DataLayoutType | {
            orientation?: Orientation;
            type?: DataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    set nodes(value: {
        autoLayout?: DataLayoutType | {
            orientation?: Orientation;
            type?: DataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    });
    /**
     * Specifies the color of a diagram page.
    
     */
    get pageColor(): string;
    set pageColor(value: string);
    /**
     * Specifies the page orientation.
    
     */
    get pageOrientation(): PageOrientation;
    set pageOrientation(value: PageOrientation);
    /**
     * Specifies a size of pages.
    
     */
    get pageSize(): {
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    };
    set pageSize(value: {
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    });
    /**
     * Configures the Properties panel settings.
    
     */
    get propertiesPanel(): {
        tabs?: Array<any | {
            commands?: Array<CustomCommand | Command>;
            groups?: Array<any | {
                commands?: Array<CustomCommand | Command>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: PanelVisibility;
    };
    set propertiesPanel(value: {
        tabs?: Array<any | {
            commands?: Array<CustomCommand | Command>;
            groups?: Array<any | {
                commands?: Array<CustomCommand | Command>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: PanelVisibility;
    });
    /**
     * Specifies whether the diagram is read-only.
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether grid lines are visible.
    
     */
    get showGrid(): boolean;
    set showGrid(value: boolean);
    /**
     * Switch the Diagram UI component to simple view mode.
    
     */
    get simpleView(): boolean;
    set simpleView(value: boolean);
    /**
     * Specifies whether diagram elements should snap to grid lines.
    
     */
    get snapToGrid(): boolean;
    set snapToGrid(value: boolean);
    /**
     * Configures the toolbox settings.
    
     */
    get toolbox(): {
        groups?: Array<ShapeCategory | any | {
            category?: ShapeCategory | string;
            displayMode?: ToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<ShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: PanelVisibility;
        width?: number | undefined;
    };
    set toolbox(value: {
        groups?: Array<ShapeCategory | any | {
            category?: ShapeCategory | string;
            displayMode?: ToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<ShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: PanelVisibility;
        width?: number | undefined;
    });
    /**
     * Specifies the measurement unit for size properties.
    
     */
    get units(): Units;
    set units(value: Units);
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    get useNativeScrolling(): boolean;
    set useNativeScrolling(value: boolean);
    /**
     * Configures the view toolbar settings.
    
     */
    get viewToolbar(): {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    };
    set viewToolbar(value: {
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    });
    /**
     * Specifies the measurement unit that is displayed in user interface elements.
    
     */
    get viewUnits(): Units;
    set viewUnits(value: Units);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
     * Specifies the zoom level.
    
     */
    get zoomLevel(): number | {
        items?: Array<number>;
        value?: number | undefined;
    };
    set zoomLevel(value: number | {
        items?: Array<number>;
        value?: number | undefined;
    });
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed after a custom command item was clicked and allows you to implement the custom command&apos;s logic.
    
    
     */
    onCustomCommand: EventEmitter<CustomCommandEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a shape or connector is clicked.
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * A function that is executed after a shape or connector is double-clicked.
    
    
     */
    onItemDblClick: EventEmitter<ItemDblClickEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that allows you to prohibit an edit operation at run time.
    
    
     */
    onRequestEditOperation: EventEmitter<RequestEditOperationEvent>;
    /**
    
     * A function that allows you to specify whether or not the UI component should reapply its auto layout after diagram data is reloaded.
    
    
     */
    onRequestLayoutUpdate: EventEmitter<RequestLayoutUpdateEvent>;
    /**
    
     * A function that is executed after the selection is changed in the Diagram.
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoZoomModeChange: EventEmitter<AutoZoomMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<{
        commands?: Array<CustomCommand | Command>;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextToolboxChange: EventEmitter<{
        category?: ShapeCategory | string;
        displayMode?: ToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<ShapeType | string>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapesChange: EventEmitter<Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: ShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeToolboxTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    defaultItemPropertiesChange: EventEmitter<{
        connectorLineEnd?: ConnectorLineEnd;
        connectorLineStart?: ConnectorLineEnd;
        connectorLineType?: ConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    edgesChange: EventEmitter<{
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        fileName?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    gridSizeChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasChangesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    historyToolbarChange: EventEmitter<{
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mainToolbarChange: EventEmitter<{
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nodesChange: EventEmitter<{
        autoLayout?: DataLayoutType | {
            orientation?: Orientation;
            type?: DataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: Store | DataSource | DataSourceOptions | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageOrientationChange: EventEmitter<PageOrientation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageSizeChange: EventEmitter<{
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    propertiesPanelChange: EventEmitter<{
        tabs?: Array<any | {
            commands?: Array<CustomCommand | Command>;
            groups?: Array<any | {
                commands?: Array<CustomCommand | Command>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: PanelVisibility;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    simpleViewChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    snapToGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolboxChange: EventEmitter<{
        groups?: Array<ShapeCategory | any | {
            category?: ShapeCategory | string;
            displayMode?: ToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<ShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: PanelVisibility;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    unitsChange: EventEmitter<Units>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewToolbarChange: EventEmitter<{
        commands?: Array<CustomCommand | Command>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewUnitsChange: EventEmitter<Units>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomLevelChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number | undefined;
    }>;
    get customShapesChildren(): QueryList<DxiCustomShapeComponent>;
    set customShapesChildren(value: QueryList<DxiCustomShapeComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDiagram;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDiagramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxDiagramComponent, "dx-diagram", never, { "autoZoomMode": { "alias": "autoZoomMode"; "required": false; }; "contextMenu": { "alias": "contextMenu"; "required": false; }; "contextToolbox": { "alias": "contextToolbox"; "required": false; }; "customShapes": { "alias": "customShapes"; "required": false; }; "customShapeTemplate": { "alias": "customShapeTemplate"; "required": false; }; "customShapeToolboxTemplate": { "alias": "customShapeToolboxTemplate"; "required": false; }; "defaultItemProperties": { "alias": "defaultItemProperties"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "edges": { "alias": "edges"; "required": false; }; "editing": { "alias": "editing"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "export": { "alias": "export"; "required": false; }; "fullScreen": { "alias": "fullScreen"; "required": false; }; "gridSize": { "alias": "gridSize"; "required": false; }; "hasChanges": { "alias": "hasChanges"; "required": false; }; "height": { "alias": "height"; "required": false; }; "historyToolbar": { "alias": "historyToolbar"; "required": false; }; "mainToolbar": { "alias": "mainToolbar"; "required": false; }; "nodes": { "alias": "nodes"; "required": false; }; "pageColor": { "alias": "pageColor"; "required": false; }; "pageOrientation": { "alias": "pageOrientation"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "propertiesPanel": { "alias": "propertiesPanel"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "showGrid": { "alias": "showGrid"; "required": false; }; "simpleView": { "alias": "simpleView"; "required": false; }; "snapToGrid": { "alias": "snapToGrid"; "required": false; }; "toolbox": { "alias": "toolbox"; "required": false; }; "units": { "alias": "units"; "required": false; }; "useNativeScrolling": { "alias": "useNativeScrolling"; "required": false; }; "viewToolbar": { "alias": "viewToolbar"; "required": false; }; "viewUnits": { "alias": "viewUnits"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; "zoomLevel": { "alias": "zoomLevel"; "required": false; }; }, { "onContentReady": "onContentReady"; "onCustomCommand": "onCustomCommand"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemDblClick": "onItemDblClick"; "onOptionChanged": "onOptionChanged"; "onRequestEditOperation": "onRequestEditOperation"; "onRequestLayoutUpdate": "onRequestLayoutUpdate"; "onSelectionChanged": "onSelectionChanged"; "autoZoomModeChange": "autoZoomModeChange"; "contextMenuChange": "contextMenuChange"; "contextToolboxChange": "contextToolboxChange"; "customShapesChange": "customShapesChange"; "customShapeTemplateChange": "customShapeTemplateChange"; "customShapeToolboxTemplateChange": "customShapeToolboxTemplateChange"; "defaultItemPropertiesChange": "defaultItemPropertiesChange"; "disabledChange": "disabledChange"; "edgesChange": "edgesChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "fullScreenChange": "fullScreenChange"; "gridSizeChange": "gridSizeChange"; "hasChangesChange": "hasChangesChange"; "heightChange": "heightChange"; "historyToolbarChange": "historyToolbarChange"; "mainToolbarChange": "mainToolbarChange"; "nodesChange": "nodesChange"; "pageColorChange": "pageColorChange"; "pageOrientationChange": "pageOrientationChange"; "pageSizeChange": "pageSizeChange"; "propertiesPanelChange": "propertiesPanelChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "showGridChange": "showGridChange"; "simpleViewChange": "simpleViewChange"; "snapToGridChange": "snapToGridChange"; "toolboxChange": "toolboxChange"; "unitsChange": "unitsChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "viewToolbarChange": "viewToolbarChange"; "viewUnitsChange": "viewUnitsChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "zoomLevelChange": "zoomLevelChange"; }, ["customShapesChildren"], never, false, never>;
}
export declare class DxDiagramModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDiagramModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxDiagramModule, [typeof DxDiagramComponent], [typeof i1.DxoContextMenuModule, typeof i1.DxiCommandModule, typeof i1.DxiItemModule, typeof i1.DxoContextToolboxModule, typeof i1.DxiCustomShapeModule, typeof i1.DxiConnectionPointModule, typeof i1.DxoDefaultItemPropertiesModule, typeof i1.DxoEdgesModule, typeof i1.DxoEditingModule, typeof i1.DxoExportModule, typeof i1.DxoGridSizeModule, typeof i1.DxoHistoryToolbarModule, typeof i1.DxoMainToolbarModule, typeof i1.DxoNodesModule, typeof i1.DxoAutoLayoutModule, typeof i1.DxoPageSizeModule, typeof i1.DxoPropertiesPanelModule, typeof i1.DxiTabModule, typeof i1.DxiGroupModule, typeof i1.DxoToolboxModule, typeof i1.DxoViewToolbarModule, typeof i1.DxoZoomLevelModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxDiagramComponent, typeof i1.DxoContextMenuModule, typeof i1.DxiCommandModule, typeof i1.DxiItemModule, typeof i1.DxoContextToolboxModule, typeof i1.DxiCustomShapeModule, typeof i1.DxiConnectionPointModule, typeof i1.DxoDefaultItemPropertiesModule, typeof i1.DxoEdgesModule, typeof i1.DxoEditingModule, typeof i1.DxoExportModule, typeof i1.DxoGridSizeModule, typeof i1.DxoHistoryToolbarModule, typeof i1.DxoMainToolbarModule, typeof i1.DxoNodesModule, typeof i1.DxoAutoLayoutModule, typeof i1.DxoPageSizeModule, typeof i1.DxoPropertiesPanelModule, typeof i1.DxiTabModule, typeof i1.DxiGroupModule, typeof i1.DxoToolboxModule, typeof i1.DxoViewToolbarModule, typeof i1.DxoZoomLevelModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxDiagramModule>;
}
export { DxDiagramTypes };
