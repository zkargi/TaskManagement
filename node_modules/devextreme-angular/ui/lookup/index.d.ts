/*!
 * devextreme-angular
 * Version: 24.1.3
 * Build date: Tue Jun 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { ApplyValueMode, EditorStyle, LabelMode, Mode, PageLoadMode, Position, SimplifiedSearchMode, ValidationMessageMode, ValidationStatus } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { CollectionWidgetItem } from 'devextreme/ui/collection/ui.collection_widget.base';
import { ClosedEvent, ContentReadyEvent, DisposingEvent, InitializedEvent, ItemClickEvent, OpenedEvent, OptionChangedEvent, PageLoadingEvent, PullRefreshEvent, ScrollEvent, SelectionChangedEvent, ValueChangedEvent } from 'devextreme/ui/lookup';
import { Properties as dxPopoverOptions } from 'devextreme/ui/popover';
import DxLookup from 'devextreme/ui/lookup';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import type * as DxLookupTypes from "devextreme/ui/lookup_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * The Lookup is a UI component that allows an end user to search for an item in a collection shown in a drop-down menu.

 */
export declare class DxLookupComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxLookup;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * The text displayed on the Apply button.
    
     */
    get applyButtonText(): string;
    set applyButtonText(value: string);
    /**
     * Specifies the way an end user applies the selected value.
    
     */
    get applyValueMode(): ApplyValueMode;
    set applyValueMode(value: ApplyValueMode);
    /**
     * The text displayed on the Cancel button.
    
     */
    get cancelButtonText(): string;
    set cancelButtonText(value: string);
    /**
     * Specifies whether or not the UI component cleans the search box when the popup window is displayed.
    
     */
    get cleanSearchOnOpening(): boolean;
    set cleanSearchOnOpening(value: boolean);
    /**
     * The text displayed on the Clear button.
    
     */
    get clearButtonText(): string;
    set clearButtonText(value: string);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Store | DataSource | DataSourceOptions | null | string | Array<CollectionWidgetItem | any>;
    set dataSource(value: Store | DataSource | DataSourceOptions | null | string | Array<CollectionWidgetItem | any>);
    /**
     * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the data field whose values should be displayed.
    
     */
    get displayExpr(): Function | string | undefined;
    set displayExpr(value: Function | string | undefined);
    /**
     * Returns the value currently displayed by the UI component.
    
     */
    get displayValue(): string | undefined;
    set displayValue(value: string | undefined);
    /**
     * Specifies whether to vertically align the drop-down menu so that the selected item is in its center. Applies only in Material Design themes.
    
     */
    get dropDownCentered(): boolean;
    set dropDownCentered(value: boolean);
    /**
     * Configures the drop-down field.
    
     */
    get dropDownOptions(): dxPopoverOptions;
    set dropDownOptions(value: dxPopoverOptions);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies a custom template for the input field.
    
     */
    get fieldTemplate(): any;
    set fieldTemplate(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * A Boolean value specifying whether or not to display the lookup in full-screen mode.
    
     * @deprecated Use the dropDownOptions option instead.
    
     */
    get fullScreen(): boolean;
    set fullScreen(value: boolean);
    /**
     * Specifies whether data items should be grouped.
    
     */
    get grouped(): boolean;
    set grouped(value: boolean);
    /**
     * Specifies a custom template for group captions.
    
     */
    get groupTemplate(): any;
    set groupTemplate(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies the attributes to be passed on to the underlying HTML element.
    
     */
    get inputAttr(): any;
    set inputAttr(value: any);
    /**
     * Specifies whether the component&apos;s current value differs from the initial value.
    
     */
    get isDirty(): boolean;
    set isDirty(value: boolean);
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * An array of items displayed by the UI component.
    
     */
    get items(): Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    set items(value: Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies a text string used to annotate the editor&apos;s value.
    
     */
    get label(): string;
    set label(value: string);
    /**
     * Specifies the label&apos;s display mode.
    
     */
    get labelMode(): LabelMode;
    set labelMode(value: LabelMode);
    /**
     * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.
    
     */
    get minSearchLength(): number;
    set minSearchLength(value: number);
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    get name(): string;
    set name(value: string);
    /**
     * The text displayed on the button used to load the next page from the data source.
    
     */
    get nextButtonText(): string;
    set nextButtonText(value: string);
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Specifies whether or not the drop-down editor is displayed.
    
     */
    get opened(): boolean;
    set opened(value: boolean);
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the UI component is scrolled to the bottom.
    
     */
    get pageLoadingText(): string;
    set pageLoadingText(value: string);
    /**
     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
    
     */
    get pageLoadMode(): PageLoadMode;
    set pageLoadMode(value: PageLoadMode);
    /**
     * The text displayed by the UI component when nothing is selected.
    
     */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Specifies the text displayed in the pullDown panel when the UI component is pulled below the refresh threshold.
    
     */
    get pulledDownText(): string;
    set pulledDownText(value: string);
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
    
     */
    get pullingDownText(): string;
    set pullingDownText(value: string);
    /**
     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
    
     */
    get pullRefreshEnabled(): boolean;
    set pullRefreshEnabled(value: boolean);
    /**
     * Specifies the text displayed in the pullDown panel while the UI component is being refreshed.
    
     */
    get refreshingText(): string;
    set refreshingText(value: string);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether the search box is visible.
    
     */
    get searchEnabled(): boolean;
    set searchEnabled(value: boolean);
    /**
     * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.
    
     */
    get searchExpr(): Function | string | Array<Function | string>;
    set searchExpr(value: Function | string | Array<Function | string>);
    /**
     * Specifies a comparison operation used to search UI component items.
    
     */
    get searchMode(): SimplifiedSearchMode;
    set searchMode(value: SimplifiedSearchMode);
    /**
     * The text that is provided as a hint in the lookup&apos;s search bar.
    
     */
    get searchPlaceholder(): string;
    set searchPlaceholder(value: string);
    /**
     * Specifies the DOM events after which the UI component&apos;s search results should be updated.
    
     */
    get searchStartEvent(): string;
    set searchStartEvent(value: string);
    /**
     * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.
    
     */
    get searchTimeout(): number;
    set searchTimeout(value: number);
    /**
     * Gets the currently selected item.
    
     */
    get selectedItem(): any;
    set selectedItem(value: any);
    /**
     * Specifies whether to display the Cancel button in the lookup window.
    
     */
    get showCancelButton(): boolean;
    set showCancelButton(value: boolean);
    /**
     * Specifies whether to display the Clear button in the lookup window.
    
     */
    get showClearButton(): boolean;
    set showClearButton(value: boolean);
    /**
     * Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the minSearchLength property value.
    
     */
    get showDataBeforeSearch(): boolean;
    set showDataBeforeSearch(value: boolean);
    /**
     * Specifies how the UI component&apos;s text field is styled.
    
     */
    get stylingMode(): EditorStyle;
    set stylingMode(value: EditorStyle);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * The read-only property that holds the text displayed by the UI component input element.
    
     */
    get text(): string;
    set text(value: string);
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
    
     */
    get useItemTextAsTitle(): boolean;
    set useItemTextAsTitle(value: boolean);
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    get useNativeScrolling(): boolean;
    set useNativeScrolling(value: boolean);
    /**
     * Specifies whether to show lookup contents in the Popover UI component.
    
     */
    get usePopover(): boolean;
    set usePopover(value: boolean);
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * An array of the validation rules that failed.
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
    
     */
    get validationMessageMode(): ValidationMessageMode;
    set validationMessageMode(value: ValidationMessageMode);
    /**
     * Specifies the position of a validation message relative to the component. The validation message describes the validation rules that this component&apos;s value does not satisfy.
    
     */
    get validationMessagePosition(): Position | Mode;
    set validationMessagePosition(value: Position | Mode);
    /**
     * Indicates or specifies the current validation status.
    
     */
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects, the store key is specified, and valueExpr is not set.
    
     */
    get value(): any;
    set value(value: any);
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated.
    
     * @deprecated 
    
     */
    get valueChangeEvent(): string;
    set valueChangeEvent(value: string);
    /**
     * Specifies which data field provides unique values to the UI component&apos;s value.
    
     */
    get valueExpr(): Function | string;
    set valueExpr(value: Function | string);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
    
     */
    get wrapItemText(): boolean;
    set wrapItemText(value: boolean);
    /**
    
     * A function that is executed once the drop-down editor is closed.
    
    
     */
    onClosed: EventEmitter<ClosedEvent>;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed when a list item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * A function that is executed once the drop-down editor is opened.
    
    
     */
    onOpened: EventEmitter<OpenedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed before the next page is loaded.
    
    
     */
    onPageLoading: EventEmitter<PageLoadingEvent>;
    /**
    
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed on the drop-down item list. Supported on mobile devices only.
    
    
     */
    onPullRefresh: EventEmitter<PullRefreshEvent>;
    /**
    
     * A function that is executed on each scroll gesture performed on the drop-down item list.
    
    
     */
    onScroll: EventEmitter<ScrollEvent>;
    /**
    
     * A function that is executed when a list item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<ValueChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyValueModeChange: EventEmitter<ApplyValueMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cancelButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cleanSearchOnOpeningChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    clearButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Store | DataSource | DataSourceOptions | null | string | Array<CollectionWidgetItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayValueChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownCenteredChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopoverOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fieldTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    inputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isDirtyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelModeChange: EventEmitter<LabelMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minSearchLengthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nextButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadModeChange: EventEmitter<PageLoadMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<SimplifiedSearchMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchPlaceholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchStartEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCancelButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showClearButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDataBeforeSearchChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<EditorStyle>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useItemTextAsTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    usePopoverChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<ValidationMessageMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessagePositionChange: EventEmitter<Position | Mode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<ValidationStatus>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChangeEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapItemTextChange: EventEmitter<boolean>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLookup;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLookupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxLookupComponent, "dx-lookup", never, { "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "applyButtonText": { "alias": "applyButtonText"; "required": false; }; "applyValueMode": { "alias": "applyValueMode"; "required": false; }; "cancelButtonText": { "alias": "cancelButtonText"; "required": false; }; "cleanSearchOnOpening": { "alias": "cleanSearchOnOpening"; "required": false; }; "clearButtonText": { "alias": "clearButtonText"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "deferRendering": { "alias": "deferRendering"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "displayExpr": { "alias": "displayExpr"; "required": false; }; "displayValue": { "alias": "displayValue"; "required": false; }; "dropDownCentered": { "alias": "dropDownCentered"; "required": false; }; "dropDownOptions": { "alias": "dropDownOptions"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "fieldTemplate": { "alias": "fieldTemplate"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "fullScreen": { "alias": "fullScreen"; "required": false; }; "grouped": { "alias": "grouped"; "required": false; }; "groupTemplate": { "alias": "groupTemplate"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "inputAttr": { "alias": "inputAttr"; "required": false; }; "isDirty": { "alias": "isDirty"; "required": false; }; "isValid": { "alias": "isValid"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemTemplate": { "alias": "itemTemplate"; "required": false; }; "label": { "alias": "label"; "required": false; }; "labelMode": { "alias": "labelMode"; "required": false; }; "minSearchLength": { "alias": "minSearchLength"; "required": false; }; "name": { "alias": "name"; "required": false; }; "nextButtonText": { "alias": "nextButtonText"; "required": false; }; "noDataText": { "alias": "noDataText"; "required": false; }; "opened": { "alias": "opened"; "required": false; }; "pageLoadingText": { "alias": "pageLoadingText"; "required": false; }; "pageLoadMode": { "alias": "pageLoadMode"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "pulledDownText": { "alias": "pulledDownText"; "required": false; }; "pullingDownText": { "alias": "pullingDownText"; "required": false; }; "pullRefreshEnabled": { "alias": "pullRefreshEnabled"; "required": false; }; "refreshingText": { "alias": "refreshingText"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "searchEnabled": { "alias": "searchEnabled"; "required": false; }; "searchExpr": { "alias": "searchExpr"; "required": false; }; "searchMode": { "alias": "searchMode"; "required": false; }; "searchPlaceholder": { "alias": "searchPlaceholder"; "required": false; }; "searchStartEvent": { "alias": "searchStartEvent"; "required": false; }; "searchTimeout": { "alias": "searchTimeout"; "required": false; }; "selectedItem": { "alias": "selectedItem"; "required": false; }; "showCancelButton": { "alias": "showCancelButton"; "required": false; }; "showClearButton": { "alias": "showClearButton"; "required": false; }; "showDataBeforeSearch": { "alias": "showDataBeforeSearch"; "required": false; }; "stylingMode": { "alias": "stylingMode"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "text": { "alias": "text"; "required": false; }; "useItemTextAsTitle": { "alias": "useItemTextAsTitle"; "required": false; }; "useNativeScrolling": { "alias": "useNativeScrolling"; "required": false; }; "usePopover": { "alias": "usePopover"; "required": false; }; "validationError": { "alias": "validationError"; "required": false; }; "validationErrors": { "alias": "validationErrors"; "required": false; }; "validationMessageMode": { "alias": "validationMessageMode"; "required": false; }; "validationMessagePosition": { "alias": "validationMessagePosition"; "required": false; }; "validationStatus": { "alias": "validationStatus"; "required": false; }; "value": { "alias": "value"; "required": false; }; "valueChangeEvent": { "alias": "valueChangeEvent"; "required": false; }; "valueExpr": { "alias": "valueExpr"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wrapItemText": { "alias": "wrapItemText"; "required": false; }; }, { "onClosed": "onClosed"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onOpened": "onOpened"; "onOptionChanged": "onOptionChanged"; "onPageLoading": "onPageLoading"; "onPullRefresh": "onPullRefresh"; "onScroll": "onScroll"; "onSelectionChanged": "onSelectionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "applyButtonTextChange": "applyButtonTextChange"; "applyValueModeChange": "applyValueModeChange"; "cancelButtonTextChange": "cancelButtonTextChange"; "cleanSearchOnOpeningChange": "cleanSearchOnOpeningChange"; "clearButtonTextChange": "clearButtonTextChange"; "dataSourceChange": "dataSourceChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "displayExprChange": "displayExprChange"; "displayValueChange": "displayValueChange"; "dropDownCenteredChange": "dropDownCenteredChange"; "dropDownOptionsChange": "dropDownOptionsChange"; "elementAttrChange": "elementAttrChange"; "fieldTemplateChange": "fieldTemplateChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "fullScreenChange": "fullScreenChange"; "groupedChange": "groupedChange"; "groupTemplateChange": "groupTemplateChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "inputAttrChange": "inputAttrChange"; "isDirtyChange": "isDirtyChange"; "isValidChange": "isValidChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "labelChange": "labelChange"; "labelModeChange": "labelModeChange"; "minSearchLengthChange": "minSearchLengthChange"; "nameChange": "nameChange"; "nextButtonTextChange": "nextButtonTextChange"; "noDataTextChange": "noDataTextChange"; "openedChange": "openedChange"; "pageLoadingTextChange": "pageLoadingTextChange"; "pageLoadModeChange": "pageLoadModeChange"; "placeholderChange": "placeholderChange"; "pulledDownTextChange": "pulledDownTextChange"; "pullingDownTextChange": "pullingDownTextChange"; "pullRefreshEnabledChange": "pullRefreshEnabledChange"; "refreshingTextChange": "refreshingTextChange"; "rtlEnabledChange": "rtlEnabledChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchPlaceholderChange": "searchPlaceholderChange"; "searchStartEventChange": "searchStartEventChange"; "searchTimeoutChange": "searchTimeoutChange"; "selectedItemChange": "selectedItemChange"; "showCancelButtonChange": "showCancelButtonChange"; "showClearButtonChange": "showClearButtonChange"; "showDataBeforeSearchChange": "showDataBeforeSearchChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "textChange": "textChange"; "useItemTextAsTitleChange": "useItemTextAsTitleChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "usePopoverChange": "usePopoverChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationMessagePositionChange": "validationMessagePositionChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueChangeEventChange": "valueChangeEventChange"; "valueExprChange": "valueExprChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapItemTextChange": "wrapItemTextChange"; "onBlur": "onBlur"; }, ["itemsChildren"], never, false, never>;
}
export declare class DxLookupModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLookupModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxLookupModule, [typeof DxLookupComponent], [typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxoHideEventModule, typeof i1.DxoShowEventModule, typeof i1.DxiToolbarItemModule, typeof i1.DxiItemModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxLookupComponent, typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxoHideEventModule, typeof i1.DxoShowEventModule, typeof i1.DxiToolbarItemModule, typeof i1.DxiItemModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxLookupModule>;
}
export { DxLookupTypes };
